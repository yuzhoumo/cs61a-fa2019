PLAYER_NAME = 'HOG 9000'


def final_strategy(score, opponent_score):
    rolls = 1

    # Potential points
    bacon_points = free_bacon(opponent_score)
    bacon_score = score + bacon_points
    one_score = score + 1

    # Alternates default rolls by 2 roughly 50% of time
    if opponent_score % 10 < 5:
        rolls = 6
    else:
        rolls = 4

    # If beneficial swap, roll 0
    if opponent_score > score and is_swap(bacon_score, opponent_score):
        rolls = 0

    # If beneficial swap, run bacon strategy
    elif opponent_score < bacon_score and not is_swap(bacon_score, opponent_score):
        return bacon_strategy(score, opponent_score, 6, 6)

    # If scores equal, run bacon strategy
    elif opponent_score == bacon_score:
        return bacon_strategy(score, opponent_score, 6, 6)

    # If beneficial swap by rolling one
    elif opponent_score > score and is_swap(one_score, opponent_score):
        rolls = 10

    # If opponent about to win
    if opponent_score > 97:
        rolls = close_gap(score)

    return rolls


# Probability of rolling at least k points in n rolls; AT_LEAST_PROB[k-1][n-1]
AT_LEAST_PROB = [
    [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
    [0.833333333333333, 0.694444444444444, 0.578703703703704, 0.482253086419753, 0.401877572016461, 0.334897976680384, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0.666666666666667, 0.694444444444444, 0.578703703703704, 0.482253086419753, 0.401877572016461, 0.334897976680384, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0.5, 0.694444444444444, 0.578703703703704, 0.482253086419753, 0.401877572016461, 0.334897976680384, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0.333333333333333, 0.666666666666667, 0.578703703703704, 0.482253086419753, 0.401877572016461, 0.334897976680384, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0.166666666666667, 0.611111111111111, 0.578703703703704, 0.482253086419753, 0.401877572016461, 0.334897976680384, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0, 0.527777777777778, 0.574074074074074, 0.482253086419753, 0.401877572016461, 0.334897976680384, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0, 0.416666666666667, 0.560185185185185, 0.482253086419753, 0.401877572016461, 0.334897976680384, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0, 0.277777777777778, 0.532407407407407, 0.481481481481482, 0.401877572016461, 0.334897976680384, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0, 0.166666666666667, 0.486111111111111, 0.478395061728395, 0.401877572016461, 0.334897976680384, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0, 0.083333333333333, 0.416666666666667, 0.470679012345679, 0.401748971193416, 0.334897976680384, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0, 0.027777777777778, 0.333333333333333, 0.455246913580247, 0.401105967078189, 0.334897976680384, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0, 0, 0.24537037037037, 0.428240740740741, 0.39917695473251, 0.334876543209876, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0, 0, 0.162037037037037, 0.388117283950617, 0.394675925925926, 0.334747942386831, 0.279081647233653, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0, 0, 0.092592592592593, 0.335648148148148, 0.385673868312757, 0.334297839506173, 0.279078074988569, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0, 0, 0.046296296296296, 0.27391975308642, 0.37011316872428, 0.33309756515775, 0.279053069272977, 0.232568039361378, 0.193806699467815, 0.161505582889846],
    [0, 0, 0.018518518518519, 0.208333333333333, 0.346322016460905, 0.3303969478738, 0.278953046410608, 0.232567443987197, 0.193806699467815, 0.161505582889846],
    [0, 0, 0.00462962962963, 0.146604938271605, 0.313528806584362, 0.325124314128944, 0.278652977823502, 0.232562680993751, 0.193806699467815, 0.161505582889846],
    [0, 0, 0, 0.094135802469136, 0.272376543209876, 0.31599365569273, 0.277902806355738, 0.232541247523243, 0.193806600238785, 0.161505582889846],
    [0, 0, 0, 0.054012345679012, 0.225437242798354, 0.301718964334705, 0.27627743484225, 0.232469802621551, 0.193805707177514, 0.161505582889846],
    [0, 0, 0, 0.027006172839506, 0.176440329218107, 0.28133573388203, 0.273151720393233, 0.232273329141899, 0.193801241871158, 0.161505566351674],
    [0, 0, 0, 0.011574074074074, 0.129501028806584, 0.25462962962963, 0.267721907864655, 0.231806555784179, 0.193784869081187, 0.161505400969957],
    [0, 0, 0, 0.003858024691358, 0.088348765432099, 0.222350823045267, 0.259094935985368, 0.230822997637555, 0.193735750711274, 0.161504491370514],
    [0, 0, 0, 0.000771604938272, 0.055555555555556, 0.186213991769547, 0.24646704961134, 0.22895114121323, 0.193608936010771, 0.161500852972743],
    [0, 0, 0, 0, 0.031764403292181, 0.148683984910837, 0.229338134430727, 0.22569146757354, 0.193318988784738, 0.161489028179986],
    [0, 0, 0, 0, 0.016203703703704, 0.112547153635117, 0.20770819044353, 0.220452174782807, 0.192720637733069, 0.161456084141984],
    [0, 0, 0, 0, 0.007201646090535, 0.080268347050755, 0.182202360539552, 0.212628958047554, 0.191590915225067, 0.161374964409854],
    [0, 0, 0, 0, 0.002700617283951, 0.053562242798354, 0.1540709304984, 0.201721703055936, 0.189620722831885, 0.161194863720173],
    [0, 0, 0, 0, 0.000771604938272, 0.033179012345679, 0.125010716735254, 0.187468445168419, 0.186424456542448, 0.160829204744153],
    [0, 0, 0, 0, 0.000128600823045, 0.018904320987654, 0.096879286694102, 0.169964444253925, 0.181574240778845, 0.160143366764255],
    [0, 0, 0, 0, 0, 0.00977366255144, 0.071373456790124, 0.14972172210791, 0.17466045810471, 0.158945953519534],
    [0, 0, 0, 0, 0, 0.004501028806584, 0.049743512802926, 0.127645247485139, 0.165372620884774, 0.156988495518552],
    [0, 0, 0, 0, 0, 0.001800411522634, 0.032614597622314, 0.104922791876238, 0.153584212105624, 0.153978465580492],
    [0, 0, 0, 0, 0, 0.000600137174211, 0.019986711248285, 0.082846317253468, 0.139420260345222, 0.14960874985711],
    [0, 0, 0, 0, 0, 0.000150034293553, 0.011359739368999, 0.062603595107453, 0.123287108481939, 0.143602664736066],
    [0, 0, 0, 0, 0, 2.14E-05, 0.005929926840421, 0.045099594192958, 0.10585008716278, 0.135768632036529],
    [0, 0, 0, 0, 0, 0, 0.002804212391404, 0.030846336305441, 0.087956612305035, 0.126054109987045],
    [0, 0, 0, 0, 0, 0, 0.001178840877915, 0.019939081313824, 0.070519590985876, 0.114585714830056],
    [0, 0, 0, 0, 0, 0, 0.000428669410151, 0.01211586457857, 0.054386439122593, 0.101683046733433],
    [0, 0, 0, 0, 0, 0, 0.000128600823045, 0.006876571787837, 0.040222487362191, 0.087838943213475],
    [0, 0, 0, 0, 0, 0, 2.86E-05, 0.003616898148148, 0.028434078583041, 0.073666639676371],
    [0, 0, 0, 0, 0, 0, 3.57E-06, 0.001745041723823, 0.019146241363105, 0.059822536156413],
    [0, 0, 0, 0, 0, 0, 0, 0.000761483577199, 0.01223245868897, 0.046919868059789],
    [0, 0, 0, 0, 0, 0, 0, 0.000294710219479, 0.007382242925367, 0.035451472902801],
    [0, 0, 0, 0, 0, 0, 0, 9.82E-05, 0.004185976635929, 0.025736950853317],
    [0, 0, 0, 0, 0, 0, 0, 2.68E-05, 0.002215784242748, 0.017902918153779],
    [0, 0, 0, 0, 0, 0, 0, 5.36E-06, 0.001086061734746, 0.011896833032736],
    [0, 0, 0, 0, 0, 0, 0, 5.95E-07, 0.000487710683077, 0.007527117309353],
    [0, 0, 0, 0, 0, 0, 0, 0, 0.000197763457044, 0.004517087371293],
    [0, 0, 0, 0, 0, 0, 0, 0, 7.09E-05, 0.002559629370311],
    [0, 0, 0, 0, 0, 0, 0, 0, 2.18E-05, 0.001362216125591],
    [0, 0, 0, 0, 0, 0, 0, 0, 5.46E-06, 0.000676378145693],
    [0, 0, 0, 0, 0, 0, 0, 0, 9.92E-07, 0.000310719169673],
    [0, 0, 0, 0, 0, 0, 0, 0, 9.92E-08, 0.000130618479991],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 4.95E-05],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1.66E-05],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 4.73E-06],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1.09E-06],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1.82E-07],
    [0, 0, 0, 0, 0, 0, 0, 0, 0, 1.65E-08]
]


def at_least_prob(k, n):
    """
    Returns probability to get at least k points with n rolls
    """
    assert 0 < n < 11, 'Not a valid number of rolls.'
    if k > 60:
        return 0
    return AT_LEAST_PROB[k-1][n-1]


def free_bacon(score):
    """
    Return the points scored from rolling 0 dice (Free Bacon).
    score:  The opponent's current score.
    """
    assert score < 100, 'The game should be over.'
    return 10 - min(score % 10, score // 10)


def bacon_strategy(score, opponent_score, margin=6, num_rolls=6):
    """
    This strategy rolls 0 dice if that gives at least MARGIN points, and
    rolls NUM_ROLLS otherwise.
    """

    if free_bacon(opponent_score) >= margin:
        return 0
    return num_rolls


def is_swap(player_score, opponent_score):
    """
    Return whether the two scores should be swapped
    """
    if swap_value(player_score) == swap_value(opponent_score):
        return True
    return False


def swap_value(score):
    """
    Returns swap value of score (first digit * last)
    """
    assert score < 999, 'Not a possible score.'
    if score < 10:
        return score * score
    if score < 100:
        return (score // 10) * (score % 10)
    return (score // 100) * (score % 10)


def close_gap(score):
    """
    Attempts to close score gap when opponent is about to win (99)
    """
    rolls = 6
    goal = 100 - score
    if goal < 60:
        max_prob, rolls = max_prob_rolls(goal)
    return rolls


def max_prob_rolls(goal):
    """
    Returns number of rolls with highest probability of reaching goal points
    """
    max_prob, rolls = 0, 0
    for i in range(1, 11):
        prob = at_least_prob(goal, i)
        if prob >= max_prob:
            max_prob = prob
            rolls = i
    return max_prob, rolls


def max_prob_exceeding_rolls(start):
    """
    Returns number of rolls with highest probability of exceeding start points the most
    """
    assert start < 60, 'start must be less than 60.'
    max_prob, rolls = 0, 0
    for i in range(start + 1, 61):
        temp_prob, temp_rolls = max_prob_rolls(i)
        if temp_prob > max_prob:
            max_prob, rolls = temp_prob, temp_rolls
    return max_prob, rolls
