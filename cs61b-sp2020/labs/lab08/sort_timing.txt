Q: Is one sorting algorithm always faster than another?
A: No, while some algorithms are usually faster, it's not always the case in practice, especially for smaller array lengths or special cases.

Q: Above we said that BubbleSort, WipingBubbleSort, and InsertionSort each had the same Theta(N^2) asymptotic time complexity. How can you explain the differences in the plots for these three algorithms?
A: Asymptotical bounds tell us only the general shape of the plot. These plots all have the same shape but increase at different rates.

Q: What information can we gain from empirical analysis of algorithms which might not be as noticeable in asymptotical bounds?
A: Asymptotical bounds can tell only the proportionate runtime (shape of the plot) while empirical analysis can give insight on actual runtime. For example, both BubbleSorter and WipingBubbleSorter are Theta(N^2) but WipingBubbleSorter is significantly faster.

Q: For any given sorting algorithm, does increasing the array size always mean the sorting takes longer?
A: No, the algorithms might have spikes in run time for smaller array sizes. The initial order of the array elements have an effect on sorting time as well.

Q: How does changing nrepeats change the plot?
A: Changing nrepeats smooths out the plots (less noise/outliers in data).

Q: Is your plot the exact same as your partner's plot, even with the same values of ntrials, by, and nrepeats?
A: No, even if values are the same, differences in hardware and current system load can affect the results. The plots are similar but not exactly the same.

Q: Optional: Look at the source code for BubbleSorter to WipingBubbleSorter. After looking at the plots, can you intuitively explain why WipingBubbleSorter is usually 2x as fast as BubbleSorter? (Hint: Consider the immobility of some elements when the swapping passes are single directional (i.e. only going forward), and how this "Wiping" strategy helps deal with that issue.) Can you come up with an example that shows the difference in runtime?
A: